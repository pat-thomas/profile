#!/usr/bin/env ruby -w
require 'optparse'

class Rabbit

  def initialize
    @commands = {
     'queues'           => true,
     'users'            => true,
     'exchanges'        => true,
     'bindings'         => true,
     'vhosts'           => true,
     'permissions'      => true
    }

    @options = {:raw => false}
    OptionParser.new do |opts|
      opts.banner = "Usage: #$0 [options] {#{@commands.keys.sort.join(',')}}"

      opts.on("-v", "--vhost VHOST", "View information for a particular VHost") do |v|
        @options[:vhost] = v
      end

      opts.on("-X", "--Xpansion", "Display shell completion options") do |v|
        @options[:expansion] = v
      end

      opts.on("-r", "--raw", "Raw output (no rec-view)") do |v|
        @options[:raw] = v
      end

    end.parse!

    if @options[:expansion]
      puts "--vhost #{@commands.keys.sort.join(" ")}"
      exit 0
    end

    @args = ARGV
  end

  def command
    cmd = nil
    if @args.empty?
      cmd = 'queues'
    else
      cmd = @args.first
      unless @commands[cmd]
        raise "Error: unrecognized command: #{cmd}"
      end
    end
    cmd
  end

  def has_rec_view?
    ENV['PATH'].split(/:/).any? do |p|
      File.exists?("#{p}/rec-view")
    end
  end

  def is_raw?
    @options[:raw]
  end

  def pipe_to_less?
    STDOUT.tty? && !is_raw?
  end

  def vhost
    @options[:vhost]
  end

  def get_vhosts
    `rabbitmqctl -q list_vhosts`.split(/\n/)
  end

  def use_rec_view?
    has_rec_view?
  end

  def rec_view_cmd fields, vhost=nil, vnum=0
    if use_rec_view?
      do_raw = is_raw? ? '-r' : ''
      no_hdr = vnum > 0 ? '--no-header' : ''
      if vhost.nil?
        " | rec-view #{do_raw} #{no_hdr} --fields=#{fields}"
      else
        " | rec-view #{do_raw} #{no_hdr} --const=vhost:#{vhost} --fields=#{fields}"
      end
    else
      ''
    end
  end

  def show_queues
    fields = "name,durable,auto_delete,arguments,pid,owner_pid,exclusive_consumer_pid,exclusive_consumer_tag,messages_ready,messages_unacknowledged,messages_uncommitted,messages,acks_uncommitted,consumers,transactions,memory"

    vhosts = vhost ? [vhost] : get_vhosts
    vnum = 0
    cmds = vhosts.map do |vhost|
      c = "rabbitmqctl -q list_queues"
      c = "#{c} -p #{vhost}"
      c = "#{c} #{fields.gsub(',',' ')}"
      c = "#{c} #{rec_view_cmd fields, vhost, vnum}"
      vnum += 1
      c
    end

    cmd = cmds.join(";")
    cmd = "(#{cmds.join(";")})"
    cmd = "#{cmd} | less" if pipe_to_less?
    system(cmd)
  end

  def show_users
    cmd = "rabbitmqctl -q list_users"
    cmd = "#{cmd} #{rec_view_cmd ['user_name']}"
    cmd = "#{cmd} | less" if pipe_to_less?
    system(cmd)
  end

  def show_vhosts 
    cmd = "rabbitmqctl -q list_vhosts"
    cmd = "#{cmd} #{rec_view_cmd ['vhost']}"
    cmd = "#{cmd} | less" if pipe_to_less?
    system(cmd)
  end

  def show_exchanges
    fields = "name,type,durable,auto_delete,arguments"

    vhosts = vhost ? [vhost] : get_vhosts
    vnum = 0
    cmds = vhosts.map do |vhost|
      c = "rabbitmqctl -q list_exchanges"
      c = "#{c} -p #{vhost}"
      c = "#{c} #{fields.gsub(',',' ')}"
      c = "#{c} #{rec_view_cmd fields, vhost, vnum}"
      vnum += 1
      c
    end

    cmd = cmds.join(";")
    cmd = "(#{cmds.join(";")})"
    cmd = "#{cmd} | less" if pipe_to_less?
    system(cmd)
  end

  def show_bindings 
    fields = "exchange_name,queue_name,routing_key,arguments"
    vhosts = vhost ? [vhost] : get_vhosts 
    vnum = 0
    cmds = vhosts.map do |vhost| 
      c = "rabbitmqctl -q list_bindings" 
      c = "#{c} -p #{vhost}" 
      c = "#{c} #{fields.gsub(',',' ')}" 
      c = "#{c} #{rec_view_cmd fields, vhost, vnum}" 
      vnum += 1
      c
    end

    cmd = cmds.join(";")
    cmd = "(#{cmds.join(";")})"
    cmd = "#{cmd} | less" if pipe_to_less?
    system(cmd)
  end

  def show_permissions
    fields = "username,configure,write,read"
    vhosts = vhost ? [vhost] : get_vhosts 
    vnum = 0
    cmds = vhosts.map do |vhost| 
      c = "rabbitmqctl -q list_permissions" 
      c = "#{c} -p #{vhost}" 
      c = "#{c} #{rec_view_cmd fields, vhost, vnum}" 
      vnum += 1
      c
    end

    cmd = cmds.join(";")
    cmd = "(#{cmds.join(";")})"
    cmd = "#{cmd} | less" if pipe_to_less?
    system(cmd)
  end

  def run
    self.send("show_#{command}".to_sym)
  end

end

Rabbit.new.run

